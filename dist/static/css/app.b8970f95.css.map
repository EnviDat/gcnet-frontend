{"version":3,"sources":["webpack:///src/components/src/components/TheNavigation.vue","webpack:///src/components/BaseElements/src/components/BaseElements/BaseClickCard.vue","webpack:///src/components/BaseElements/src/components/BaseElements/BaseStatusIconButton.vue","webpack:///src/components/src/components/MicroChart.vue","webpack:///src/components/src/components/TitleView.vue","webpack:///src/components/Pages/src/components/Pages/LandingPage.vue","webpack:///src/components/src/components/DetailChart.vue","webpack:///src/src/App.vue"],"names":[],"mappings":"AAsKA,iCACA,mBAAA,CACA,0BACA,CCjEA,iCACA,0BAAA,CACA,0BAAA,CACA,+BAAA,CACA,4BAAA,CACA,6BACA,CAEA,+BACA,wBAAA,CACA,2BACA,CAEA,oCACA,uBACA,CClEA,eACA,iBAAA,CACA,OACA,CCwZA,4BACA,aAAA,CACA,oBACA,CC9UA,WACA,cACA,CAEA,WACA,aACA,CCGA,mFAEA,mBACA,CCkNA,oCACA,OACA,YACA,CACA,CAGA,oCACA,OACA,YACA,CACA,CAGA,oCACA,OACA,YACA,CACA,CAGA,qCACA,OACA,YACA,CACA,CCnKA,mCAEA,eAAA,CAEA,WAAA,CACA,kBACA,CAEA,4DAEA,0BAAA,CAAA,kBACA,CAEA,4EAEA,4BAAA,CAAA,oBACA","file":"app.b8970f95.css","sourcesContent":["<template>\r\n  <v-navigation-drawer\r\n    class=\"gc_net_navigation\"\r\n    permanent\r\n    app\r\n    :width=\"open\"\r\n  >\r\n\r\n    <v-toolbar flat class=\"transparent\">\r\n      <v-list class=\"pa-0 gc_net_nav\" :dense=\"$vuetify.breakpoint.smAndDown\">\r\n        <v-list-tile avatar :class=\"$vuetify.breakpoint.mdAndUp ? '' : 'px-0'\"\r\n                      @click.stop=\"catchHomeClick\"\r\n        >\r\n          <v-list-tile-avatar :class=\"$vuetify.breakpoint.mdAndUp ? '' : 'px-0'\" >\r\n            <img :src=\"gcNetlogo\">\r\n          </v-list-tile-avatar>\r\n\r\n          <v-list-tile-content>\r\n            <v-list-tile-title>{{ gcNetHomeText }}</v-list-tile-title>\r\n            <p class=\"mb-0\" style=\"font-size: 9px;\" >{{ version }}</p>\r\n          </v-list-tile-content>\r\n\r\n        </v-list-tile>\r\n      </v-list>\r\n    </v-toolbar>\r\n\r\n    <v-list class=\"pt-0\" dense>\r\n      <v-divider></v-divider>\r\n\r\n      <v-list-group\r\n        :prepend-icon=\"navItems[0].icon\"\r\n        v-model=\"navItems[0].active\"\r\n      >\r\n\r\n        <template v-slot:activator>\r\n          <v-list-tile>\r\n            <v-list-tile-title>{{ navItems[0].title }}</v-list-tile-title>\r\n          </v-list-tile>\r\n\r\n        </template>\r\n        <v-list-tile-content>\r\n          <slot name=\"map\">\r\n            \r\n          </slot>\r\n        </v-list-tile-content>\r\n\r\n      </v-list-group>\r\n\r\n      <v-list-group\r\n        :prepend-icon=\"navItems[1].icon\"\r\n        v-model=\"navItems[1].active\"\r\n      >\r\n\r\n        <template v-slot:activator>\r\n          <v-list-tile>\r\n            <v-list-tile-title>{{ navItems[1].title }}</v-list-tile-title>\r\n          </v-list-tile>\r\n\r\n        </template>\r\n        <v-list-tile-content>\r\n          <slot name=\"list\">\r\n            \r\n          </slot>\r\n        </v-list-tile-content>\r\n        \r\n      </v-list-group>\r\n\r\n      <!-- Domi: StationOverview list tile with click, icon and title -->\r\n      <v-list-tile avatar :class=\"$vuetify.breakpoint.mdAndUp ? '' : 'px-0'\"\r\n                    @click.stop=\"catchStationOverviewClick\"\r\n      >\r\n        <v-list-tile-action class=\"v-list__group__header__prepend-icon\">\r\n          <v-icon >{{ navItems[2].icon }}</v-icon>\r\n        </v-list-tile-action>        \r\n\r\n        <v-list-tile-content>\r\n          <v-list-tile-title>{{ navItems[2].title }}</v-list-tile-title>\r\n        </v-list-tile-content>\r\n\r\n      </v-list-tile>\r\n\r\n    </v-list>\r\n\r\n  </v-navigation-drawer>\r\n</template>\r\n\r\n\r\n<script>\r\nimport gcNetlogo from '@/assets/gc_net_logo.png';\r\n\r\nexport default {\r\n  props: {\r\n    mini: Boolean,\r\n    navItems: Array,\r\n    version: String,\r\n  },\r\n  watch: {\r\n    mini: function overwrite(){\r\n      this.drawerIsMini = this.mini;\r\n      this.$emit('updateDrawer', this.drawerIsMini);\r\n      // this.drawerIsMini = this.mini;\r\n    },\r\n    navItems: function updateDrawer(){\r\n      this.drawerIsMini = this.mini;\r\n      this.$emit('updateDrawer', this.drawerIsMini);\r\n    }\r\n    // drawerIsMini: function updateParent(){\r\n    //   if (this.drawerIsMini){\r\n    //     this.navItems[0].active = false;\r\n    //     this.navItems[1].active = false;\r\n    //   }\r\n    // }\r\n  },\r\n  updated(){\r\n    this.drawerIsMini = this.mini;\r\n  },\r\n  computed: {\r\n    open(){\r\n\r\n      let open = false;\r\n      const wideOpen = 500;\r\n      // Domi: new width for Stations in single line\r\n      const wideOpenStation = 300;\r\n      const wideClosed = 240;\r\n      // const smallOpen = 250;\r\n      const smallOpen = 150;\r\n      const smallClosed = 50;\r\n\r\n      if (this.navItems && this.navItems.length > 0){\r\n        open = this.navItems[0].active || this.navItems[1].active;\r\n      }\r\n\r\n      if (this.$vuetify.breakpoint.lgAndUp){\r\n        if (this.navItems[1].active){\r\n          return open ? wideOpenStation : wideClosed;\r\n        }\r\n\r\n        return open ? wideOpen : wideClosed;\r\n      } else {\r\n        return open ? smallOpen : smallClosed;\r\n      }\r\n    },\r\n  },\r\n  methods: {\r\n    catchDrawerClick(){\r\n      this.$emit('drawerClick', this.drawerIsMini);\r\n    },\r\n    catchHomeClick(){\r\n      this.$emit('homeClick');\r\n    },\r\n    catchStationOverviewClick(){\r\n      this.$emit('stationOverviewClick');\r\n    },\r\n  },\r\n  data: () => ({\r\n    drawer: true,\r\n    drawerIsMini: true,\r\n    right: null,\r\n    gcNetlogo,\r\n    gcNetHomeText: 'GC-Net Data Portal'\r\n  }),\r\n}\r\n</script>\r\n\r\n<style>\r\n\r\n  .gc_net_nav > div > div.v-list__tile{\r\n    padding: 0 !important;\r\n    padding-left: 4px !important;\r\n  }\r\n\r\n</style>\r\n","<template>\r\n  <v-card :ripple=\"!disabled\"\r\n          :hover=\"!disabled\"\r\n          :href=\"href\"\r\n          target=\"_blank\"\r\n          v-on:click.native=\"clicked\"\r\n          :disabled=\"disabled\">\r\n          \r\n    <v-container grid-list-md pa-0>\r\n      <v-layout row align-center>\r\n\r\n        <v-flex xs3 md5 py-0\r\n                ref=\"card_image_parent\"\r\n                style=\"overflow: hidden;\"\r\n                :style=\"`height: ${$vuetify.breakpoint.smAndDown ? '45px' : '60px'}`\"\r\n                >\r\n          <img v-if=\"img\"\r\n                ref=\"card_image\"\r\n                style=\"height: 100%;\"\r\n                v-on:load=\"setRandomPosition()\"\r\n                :src=\"img\" />                        \r\n        </v-flex>\r\n\r\n        <v-flex xs9 md7 mx-1 mt-1>\r\n            <div class=\"title\"\r\n                :class=\"{ 'compactTitle' : this.$vuetify.breakpoint.mdAndDown }\"\r\n            >\r\n              {{ title }}\r\n            </div>\r\n        </v-flex>\r\n\r\n      </v-layout>\r\n    </v-container>\r\n\r\n  </v-card>\r\n</template>\r\n\r\n\r\n<script>\r\nexport default {\r\n\r\n  props: {\r\n    title: String,\r\n    disabled: Boolean,\r\n    img: String,\r\n    href: String,\r\n    randomImgPosition: Boolean,\r\n  },\r\n  // mounted() {\r\n  //   if (!this.$props.randomImgPosition) {\r\n  //     return;\r\n  //   }\r\n\r\n  //   this.$nextTick(()=> {\r\n  //     this.setRandomPosition();\r\n  //   })\r\n  // },\r\n  methods: {\r\n    clicked() {\r\n      if (!this.href) {\r\n        this.$emit('clicked', this.title.toLowerCase());\r\n      }\r\n    },\r\n    setRandomPosition() {\r\n      if (!this.randomImgPosition){\r\n        return;\r\n      }\r\n\r\n      if (!this.$refs.card_image_parent){\r\n        return;\r\n      }\r\n\r\n      if (!this.$refs.card_image){\r\n        return;\r\n      }\r\n\r\n      let styles = 'position: relative; '\r\n      let rPos = 0;\r\n      let tPos = 0;\r\n      const margin = 100;\r\n      const height = this.$refs.card_image.clientHeight - margin;\r\n      const width = this.$refs.card_image.clientWidth - margin;\r\n\r\n      if (height > 0){\r\n        // tPos = this.randomIntFromInterval(0, height);\r\n        tPos = this.randomIntFromSeed(0, height, this.title);\r\n      }\r\n\r\n      if (width > 0){\r\n        // rPos = this.randomIntFromInterval(0, width);\r\n        rPos = this.randomIntFromSeed(0, width, this.title);\r\n      }\r\n\r\n      styles += `right: ${rPos}px; bottom: ${tPos}px;`;\r\n\r\n      this.$refs.card_image.style = styles;\r\n    }\r\n  },\r\n};\r\n</script>\r\n\r\n<!-- Add \"scoped\" attribute to limit CSS to this component only -->\r\n<style scoped>\r\n\r\n  .card .headline {\r\n    font-size: 1.45em !important;\r\n    overflow: inherit !important;\r\n    text-overflow: inherit !important;\r\n    max-height: inherit !important;\r\n    line-height: inherit !important;\r\n  }\r\n\r\n  .compactTitle { \r\n    font-size: 15px !important; \r\n    line-height: 1.3em !important; \r\n  } \r\n\r\n  .v-card__media img {\r\n    width: inherit !important;\r\n  }\r\n</style>","<template>\r\n\r\n  <v-layout row\r\n            @mouseover=\"hoverBadge = true\"\r\n            @mouseleave=\"hoverBadge = false\">\r\n\r\n    <v-flex v-if=\"count > 0\"\r\n            pa-0\r\n            style=\"z-index: 1;\">\r\n      <v-badge v-bind=\"{ left: !hoverBadge }\"\r\n                overlap\r\n                secondary\r\n                 >\r\n        <span slot=\"badge\"\r\n              class=\"black--text\"\r\n              secondary\r\n              style=\"font-size: 9px !important;\">{{ count }}</span>\r\n      </v-badge>              \r\n    </v-flex>\r\n\r\n    <v-flex py-0 px-1 >\r\n      <v-btn icon small ripple\r\n            class=\"ma-0\"\r\n            :color=\"color\"\r\n            :outline=\"outline\"\r\n            :style=\"`height: 20px !important; width: 20px !important;`\"\r\n            @click=\"$emit('click')\">\r\n        <v-icon class=\"black--text\" small >{{ icon }}</v-icon>\r\n      </v-btn>\r\n    </v-flex>\r\n    \r\n  </v-layout>\r\n\r\n\r\n</template>\r\n\r\n<script>\r\n  export default {\r\n    props: {\r\n      icon: String,\r\n      count: Number,\r\n      color: String,\r\n      outline: Boolean,\r\n    },\r\n    data: () => ({\r\n      hoverBadge: false,\r\n    }),\r\n    computed: {\r\n    },\r\n  };\r\n</script>\r\n\r\n<style>\r\n  .iconCentering {\r\n    position: relative;\r\n    top: 2px;\r\n  }\r\n</style>","<template>\r\n\r\n  <!-- <v-fade-transition> -->\r\n  <v-card :id=\"stationId\"\r\n          ref=\"main_container\"\r\n          v-show=\"visible\" >\r\n    <v-container fluid fill-height pa-3>\r\n\r\n      <v-layout column justify-space-between fill-height>\r\n        <v-flex pt-0>\r\n          <v-layout row justify-space-between>\r\n\r\n            <v-flex grow style=\"font-weight: 700;\">\r\n              {{ station.name }}\r\n            </v-flex>\r\n\r\n            <v-flex shrink>\r\n              <base-status-icon icon=\"access_time\"\r\n                                :color=\"allIconColor\" />\r\n            </v-flex>\r\n\r\n            <v-flex shrink>\r\n              <base-status-icon icon=\"av_timer\"\r\n                                :color=\"recentIconColor\"/>\r\n            </v-flex>\r\n\r\n            </v-layout>\r\n        </v-flex>\r\n\r\n        <v-flex v-if=\"chartIsLoading\"\r\n                xs12 py-0\r\n                style=\"width: 100%\">\r\n          <div class='skeleton skeleton-animation-shimmer' :style=\"`height: ${chartHeight};`\" >\r\n            <div style=\"width: 100%;\" class='bone bone-type-image'></div>\r\n          </div>\r\n        </v-flex>\r\n\r\n        <v-flex v-if=\"!chartIsLoading && !hasData\"\r\n              xs12 py-1\r\n              class=\"body-1\"\r\n              :style=\"`color: ${ $vuetify.theme.error };`\" >\r\n          {{ noDataText }}\r\n        </v-flex>\r\n\r\n        <v-flex v-if=\"dataError\"\r\n                xs12\r\n                class=\"smallText\"\r\n                :style=\"`color: ${ $vuetify.theme.error };`\" >\r\n          {{ dataError }}\r\n        </v-flex>\r\n\r\n        <v-flex v-show=\"!chartIsLoading && hasData\"\r\n                xs12 py-0 >\r\n          <div :id=\"microChartId\"\r\n                :style=\"`width: 100%; height: ${chartHeight}; border: 1px solid #eee;`\" >\r\n          </div>    \r\n        </v-flex>\r\n\r\n        <v-flex v-if=\"!dataError\"\r\n                xs12 py-0\r\n                class=\"smallText\">\r\n          {{ `${ chartIsLoading ? 'Loading' : 'Showing'} ${ graphs && graphs[0] ? graphs[0].title : '' } of ${ loadRecentData ? 'recent data' : 'all data'}` }}\r\n        </v-flex>\r\n\r\n        <v-flex xs12 \r\n                pt-2>\r\n          <v-layout row align-center justify-space-between >\r\n            <v-flex shrink>\r\n              <v-layout row>\r\n                <v-flex shrink>\r\n                  <base-status-icon-button :icon=\"showInfo ? 'keyboard_arrow_up' : 'keyboard_arrow_down'\"\r\n                                            color=\"primary\"\r\n                                            :outline=\"true\"\r\n                                            @click=\"showInfo = !showInfo;\" />          \r\n                </v-flex>\r\n              </v-layout>\r\n            </v-flex>\r\n\r\n            <v-flex shrink>\r\n              <v-layout row>\r\n                <v-flex shrink\r\n                        px-0\r\n                        class=\"smallText\">\r\n                  Station Details\r\n                </v-flex>\r\n\r\n                <v-flex shrink>\r\n                  <base-status-icon-button icon=\"search\"\r\n                                            color=\"secondary\"\r\n                                            @click=\"catchDetailClick(station.id)\" />\r\n                </v-flex>\r\n              </v-layout>\r\n            </v-flex>\r\n          </v-layout>\r\n        </v-flex>\r\n\r\n        <v-flex v-if=\"showInfo\"\r\n                xs12>\r\n          <v-layout column>\r\n            <v-flex >\r\n              <v-divider></v-divider>\r\n            </v-flex>\r\n\r\n            <v-flex >\r\n              <v-layout row wrap\r\n                        justify-space-between align-center>\r\n                <v-flex grow\r\n                        class=\"body-1\">\r\n                  {{ 'All Data' }}\r\n                </v-flex>\r\n\r\n                <v-flex shrink>\r\n                  <base-status-icon icon=\"access_time\"\r\n                                    :color=\"allIconColor\" />\r\n                </v-flex>\r\n\r\n                <v-flex shrink\r\n                        class=\"smallText\">\r\n                  <div :style=\"`background-color: ${ $vuetify.theme.secondary };`\"\r\n                        class=\"py-0 px-1\">\r\n                    {{ allDataLength }}\r\n                  </div>\r\n\r\n                </v-flex>\r\n\r\n                <v-flex shrink>\r\n                  <base-status-icon-button icon=\"refresh\"\r\n                                            color=\"secondary\"\r\n                                            @click=\"loadRecentData = false; loadChart(false);\" />\r\n                </v-flex>\r\n              </v-layout>\r\n            </v-flex>\r\n\r\n            <v-flex grow\r\n                    class=\"smallText\">\r\n              {{ allDataUrl }}\r\n            </v-flex>\r\n\r\n            <v-flex >\r\n              <v-divider></v-divider>\r\n            </v-flex>\r\n\r\n            <v-flex >\r\n              <v-layout row justify-space-between align-center>\r\n                <v-flex grow\r\n                        class=\"body-1\">\r\n                  {{ 'Recent Data' }}\r\n                </v-flex>\r\n\r\n                <v-flex shrink>\r\n                  <base-status-icon icon=\"av_timer\"\r\n                                    :color=\"recentIconColor\"/>\r\n                </v-flex>\r\n\r\n                <v-flex shrink\r\n                        class=\"smallText\">\r\n                  <div :style=\"`background-color: ${ $vuetify.theme.secondary };`\"\r\n                        class=\"py-0 px-1\">\r\n                    {{ recentDataLength }}\r\n                  </div>\r\n                </v-flex>\r\n\r\n                <v-flex shrink>\r\n                  <base-status-icon-button icon=\"refresh\"\r\n                                            color=\"secondary\"\r\n                                            @click=\"loadRecentData = true; loadChart(false);\" />\r\n                </v-flex>\r\n              </v-layout>\r\n            </v-flex>\r\n      \r\n            <v-flex grow\r\n                    class=\"smallText\">\r\n              {{ recentDataUrl }}\r\n            </v-flex>\r\n\r\n          </v-layout>\r\n        </v-flex>\r\n\r\n      </v-layout>\r\n\r\n    </v-container>\r\n  </v-card>\r\n  <!-- </v-fade-transition> -->\r\n\r\n</template>\r\n\r\n\r\n<script>\r\nimport { createMicroLineChart } from \"@/chartData/charts\";\r\nimport BaseStatusIcon from \"@/components/BaseElements/BaseStatusIcon\";\r\nimport BaseStatusIconButton from \"@/components/BaseElements/BaseStatusIconButton\";\r\n\r\n\r\nexport default {\r\n  name: 'MicroChart',\r\n  props: {\r\n    station: Object,\r\n    JSONUrls: {\r\n      type: Object,\r\n      default: () =>({\r\n        dataURLs: [{ fileType: 'temp', url: './testdata/0temp.json' }],\r\n        recentDataURLs: [{ fileType: 'temp', url: './testdata/0temp_v.json' }],\r\n      }),\r\n    },\r\n    fileValueMapping:{\r\n      type: Object,\r\n      default: () => ({\r\n        temp: ['AirTC1', 'AirTC2'],\r\n        press: ['press'],\r\n        wd: ['WD1', 'WD2'],\r\n        ws: ['WS1', 'WS2'],\r\n        battvolt: ['battvolt'],\r\n      }),\r\n    },\r\n    delay: {\r\n      type: Number,\r\n      default: 500,\r\n    },\r\n  },\r\n  components: {\r\n    BaseStatusIcon,\r\n    BaseStatusIconButton,\r\n  },\r\n  mounted() {\r\n    let that = this;\r\n\r\n    setTimeout(() => {\r\n      that.visible = true;\r\n      // console.log(\"visible \" + that.station.name + ' ' + that.visible);\r\n      if (that.$refs && that.$refs.main_container){\r\n        that.loadChart();\r\n      }\r\n      that = null;\r\n    }, this.delay);\r\n    // console.log(\"visible \" + that.station.name + ' ' + that.visible);\r\n\r\n  },\r\n  beforeDestroy() {\r\n    this.clearChart();\r\n  },\r\n  computed: {\r\n    hasData() {\r\n      // return this.recentDataLength > 0 || this.allDataLength > 0;\r\n      return this.recentDataAvailable || this.alldataAvailable;\r\n    },\r\n    microChartId(){\r\n      return `${this.stationId}_microChart`;\r\n    },\r\n    stationId(){\r\n      return `${this.station.id}_${this.station.alias ? this.station.alias : this.station.name}`;\r\n    },\r\n    recentIconColor() {\r\n      return this.recentCheckedOnce ? this.recentDataAvailable ? this.$vuetify.theme.success : this.$vuetify.theme.error : 'transparent';\r\n    },\r\n    allIconColor() {\r\n      return this.allCheckedOnce ? this.alldataAvailable ? this.$vuetify.theme.success : this.$vuetify.theme.error : 'transparent';\r\n    },\r\n  },\r\n  methods: {\r\n    loadChart(fallback = true){\r\n      this.clearChart();\r\n\r\n      this.fallback = fallback;\r\n      this.chartIsLoading = true;\r\n\r\n      this.urlValueMapping = this.getUrlValueMapping(this.loadRecentData);\r\n\r\n      this.buildGraphs();\r\n\r\n      // clear and then new loading on the next tick is needed for the disposing to finish\r\n      // this.$nextTick( () => {\r\n        this.loadJsonCharts();\r\n      // });\r\n    },\r\n    getUrlValueMapping(loadRecentData){\r\n      const urlValueMapping = {};\r\n      const keys = Object.keys(this.fileValueMapping);\r\n\r\n      for (let i = 0; i < keys.length; i++) {\r\n        const prefix = keys[i];\r\n\r\n        const url = this.getUrlToPrefix(prefix, loadRecentData);\r\n        \r\n        if (url) {\r\n          urlValueMapping[url] = this.fileValueMapping[prefix];\r\n        }\r\n      }\r\n\r\n      return urlValueMapping;\r\n    },\r\n    getUrlToPrefix(prefix, loadRecentData){\r\n      const urlObjs = loadRecentData ? this.JSONUrls.recentDataURLs : this.JSONUrls.dataURLs;\r\n\r\n      for (let i = 0; i < urlObjs.length; i++) {\r\n        const obj = urlObjs[i];\r\n        \r\n        if (prefix === obj.fileType) {\r\n          return obj.url;\r\n        }\r\n      }\r\n\r\n      return null;\r\n    },\r\n    buildGraphs(){\r\n      this.colorCount = 0;\r\n      const keys = Object.keys(this.urlValueMapping);\r\n      const graphs = [];\r\n\r\n      for (let i = 0; i < keys.length; i++) {\r\n        const url = keys[i];\r\n        const dataParameters = this.urlValueMapping[url];\r\n\r\n        for (let j = 0; j < dataParameters.length; j++) {\r\n          const param = dataParameters[j];\r\n\r\n          let lineColor = this.colorPalette[this.colorCount];\r\n          this.colorCount++;\r\n\r\n          graphs.push({\r\n            lineColor: lineColor,\r\n            title: param,\r\n            valueField: param,\r\n            dataUrl: url,\r\n          });\r\n        }\r\n      }\r\n\r\n      this.graphs = graphs;\r\n    },\r\n    clearChart(){\r\n      if (this.microChart) {\r\n        // console.log('dispose via MicroChart');\r\n        this.microChart.dispose();\r\n        // console.log('delete via MicroChart');\r\n        // this.microChart = null;\r\n        // delete this.microChart;\r\n      }\r\n    },\r\n    loadJsonCharts(){\r\n      this.chartIsLoading = true;\r\n      const currentDataUrl = this.graphs[0].dataUrl;\r\n\r\n      this.loadRecentData ? this.recentDataUrl = currentDataUrl : this.allDataUrl = currentDataUrl;\r\n      this.loadRecentData ? this.recentDataLength = 0 : this.allDataLength = 0;\r\n\r\n      const dateFormatingInfos = {\r\n        dateFormat: this.dateFormat,\r\n        inputFormat: 'x',\r\n      };\r\n\r\n      try {\r\n        this.microChart = createMicroLineChart(this.microChartId, 'timestamp', this.graphs, this.seriesSettings,\r\n                                                  dateFormatingInfos, this.seriesDone, this.seriesError);\r\n        // if (!this.microChart) {\r\n        //   this.microChart = createMicroLineChart(this.microChartId, 'timestamp', [this.graphs[0]], this.seriesSettings,\r\n        //                                             dateFormatingInfos, this.seriesDone, this.seriesError);\r\n        // } else {\r\n        //   // this.clearChart();\r\n        //   const series = this.microChart.series.values[0];\r\n        //   series.data = [];\r\n        //   const source = series.dataSource;\r\n        //   source.dispose();\r\n        //   source.url = currentDataUrl;\r\n        //   source.load();\r\n        // }\r\n        \r\n      } catch (error) {\r\n        this.dataError = `Error creating chart: ${error}`;\r\n      }\r\n    },\r\n    seriesError(error) {\r\n      this.chartIsLoading = false;\r\n      this.dataError = error.message;\r\n\r\n      this.loadRecentData ? this.recentCheckedOnce = true : this.allCheckedOnce = true;\r\n\r\n      if (this.loadRecentData ) {\r\n        this.recentDataAvailable = false;\r\n\r\n        if (this.fallback){\r\n          this.loadRecentData = false;\r\n\r\n          this.$nextTick( () => {\r\n            this.loadChart();\r\n          });\r\n        }\r\n      } else {\r\n        this.alldataAvailable = false;\r\n        this.clearChart();\r\n      }\r\n    },\r\n    seriesDone(doneResponse) {\r\n      this.chartIsLoading = false;\r\n      const dataLength = doneResponse && doneResponse.data ? doneResponse.data.length : 0;\r\n      \r\n      this.loadRecentData ? this.recentCheckedOnce = true : this.allCheckedOnce = true;\r\n\r\n      if (dataLength > 0) {\r\n        if (this.loadRecentData) {\r\n          this.recentDataAvailable = true;\r\n          this.recentDataLength = dataLength;\r\n        } else {\r\n          this.alldataAvailable = true;\r\n          this.allDataLength = dataLength;\r\n        }\r\n      } else {\r\n        if (this.loadRecentData) {\r\n          this.recentDataAvailable = false;\r\n\r\n          if (this.fallback){\r\n            this.loadRecentData = false;\r\n            \r\n            this.$nextTick( () => {\r\n              this.loadChart();\r\n            });\r\n          }\r\n        } else {\r\n          this.alldataAvailable = false;\r\n          this.clearChart();\r\n        }\r\n      }\r\n    },\r\n    catchDetailClick(stationId){\r\n      this.$emit('detailClick', stationId);\r\n    },\r\n  },\r\n  data: () => ({\r\n    microChart: null,\r\n    chartHeight: '50px',\r\n    dateFormat: 'HH:mm DD/MM/YYYY',\r\n    dataError: '',\r\n    noDataText: 'No data available',\r\n    loadRecentData: true,\r\n    recentCheckedOnce: false,\r\n    recentDataAvailable: false,\r\n    recentDataLength: 0,\r\n    recentDataUrl: '',\r\n    allCheckedOnce: false,\r\n    alldataAvailable: false,\r\n    allDataLength: 0,\r\n    allDataUrl: '',\r\n    chartIsLoading: true,\r\n    showInfo: false,\r\n    graphs: [],\r\n    seriesSettings: {\r\n      lineStrokeWidth: 2,\r\n      lineColor: '#8ACDCE',\r\n    },    \r\n    urlValueMapping: {},\r\n    visible: false,\r\n    colorCount: 0,\r\n    colorPalette: ['#8ACDCE', \r\n                   '#3D91BE', \r\n                   '#24448E', \r\n                   '#11174B'],\r\n    // colorPalette: ['#DCECC9', '#B3DDCC', '#8ACDCE',\r\n    //                '#62BED2', '#46AACE', '#3D91BE',\r\n    //                '#3577AE', '#2D5E9E', '#24448E',\r\n    //                '#1C2B7F', '#162065', '#11174B'],\r\n  }),\r\n};\r\n</script>\r\n\r\n<style scoped>\r\n .smallText {\r\n   font-size: 9px;\r\n   word-break: break-all;\r\n }\r\n</style>\r\n","<template>\r\n  \r\n    <v-layout>\r\n\r\n      <v-flex xs12 >\r\n\r\n        <v-layout column>\r\n          <v-flex xs12 >\r\n\r\n            <v-layout row align-center>\r\n\r\n              <v-flex xs4 lg3\r\n                      hidden-md-and-down >\r\n                <img style=\"width: 200px;\"\r\n                      :src=\"gcNetlogo\"\r\n                      :alt=\"alternativeText\" >\r\n              </v-flex>\r\n\r\n              <!-- <v-flex xs4 lg3\r\n                      hidden-md-and-down >\r\n                <img style=\"width: 200px;\"\r\n                      :src=\"lgLogo\" :alt=\"alternativeText\" >\r\n              </v-flex>\r\n\r\n              <v-flex hidden-sm-and-down hidden-lg-and-up\r\n                      xs3\r\n              >\r\n                <img \r\n                      :src=\"mdLogo\" :alt=\"alternativeText\" >\r\n              </v-flex>\r\n\r\n              <v-flex hidden-xs-only hidden-md-and-up\r\n                      xs1\r\n              >\r\n                <img \r\n                      :src=\"smLogo\" :alt=\"alternativeText\" >\r\n              </v-flex>\r\n\r\n              <v-flex xs3\r\n                      hidden-sm-and-up >\r\n                <img \r\n                      :src=\"smLogo\" :alt=\"alternativeText\" >\r\n              </v-flex> -->\r\n\r\n              <v-flex xs8 lg9 pl-5\r\n                      hidden-md-and-down\r\n                      class=\"envidatTitle display-4\"\r\n                      style=\"font-size: 100px !important;\"\r\n                      >\r\n                {{ title }}\r\n              </v-flex>\r\n\r\n              <v-flex xs8 pl-2\r\n                      hidden-sm-and-down hidden-lg-and-up \r\n                      class=\"envidatTitle display-3\">\r\n                {{ title }}\r\n              </v-flex>\r\n\r\n              <v-flex xs8 pl-2\r\n                      hidden-xs-only hidden-md-and-up\r\n                      class=\"envidatTitle display-2\">\r\n                {{ title }}\r\n              </v-flex>\r\n\r\n              <v-flex xs9 \r\n                      hidden-sm-and-up\r\n                      class=\"envidatTitle display-3\">\r\n                {{ title }}\r\n              </v-flex>\r\n\r\n\r\n            </v-layout>\r\n          </v-flex>\r\n\r\n          <!-- <v-flex xs6 pt-5 >\r\n            <slogan-card :slogan=\"slogan\"\r\n                        :subSlogan=\"subSlogan\"\r\n                        :buttonText=\"buttonText\"\r\n                        :buttonCallback=\"buttonCallback\" />\r\n          </v-flex> -->\r\n\r\n          <!-- <v-flex hidden-sm-and-down pt-5\r\n                  class=\"envidatSlogan display-1\">\r\n            {{ slogan }}\r\n          </v-flex>\r\n\r\n          <v-flex hidden-xs-only hidden-md-and-up pt-3\r\n                  class=\"envidatSlogan headline\">\r\n            {{ slogan }}\r\n          </v-flex>\r\n\r\n          <v-flex hidden-sm-and-up pt-3\r\n                  class=\"envidatSlogan headline\">\r\n            {{ slogan }}\r\n          </v-flex> -->\r\n\r\n        </v-layout>\r\n      </v-flex>\r\n  \r\n    </v-layout>\r\n\r\n</template>\r\n\r\n<script>\r\n// import SloganCard from '@/components/SloganCard';\r\nimport gcNetlogo from '@/assets/gc_net_logo.png';\r\n// import smLogo from '@/assets/logo/EnviDat_logo_64.png';\r\n// import mdLogo from '@/assets/logo/EnviDat_logo_128.png';\r\n// import lgLogo from '@/assets/logo/EnviDat_logo_256.png';\r\n\r\nexport default {\r\n  props: {\r\n    title: String,\r\n    slogan: String,\r\n    subSlogan: String,\r\n    buttonText: String,\r\n    buttonCallback: Function,\r\n  },\r\n  data: () => ({\r\n    gcNetlogo,\r\n    alternativeText: 'GC-Net Logo',\r\n  }),\r\n  computed: {\r\n  },\r\n  components: {\r\n    // SloganCard,\r\n  },\r\n};\r\n</script>\r\n\r\n<!-- Add \"scoped\" attribute to limit CSS to this component only -->\r\n<style>\r\n  \r\n  .mt-md-pct{\r\n    margin-top: 15%;\r\n  }\r\n\r\n  .mt-sm-pct{\r\n    margin-top: 8%;\r\n  }\r\n  \r\n</style>","<template>\r\n  <v-container fluid\r\n                fill-height\r\n                :class=\"$vuetify.breakpoint.smAndDown ? 'px-3 py-1' : 'px-2 py-1'\"\r\n                @click=\"anyClick\">\r\n\r\n    <v-layout row wrap >\r\n  \r\n      <v-flex xs12 md8 offset-md2 >\r\n\r\n        <v-flex pb-3>\r\n          <title-view :title=\"homeInfos.title\"\r\n                      :slogan=\"showHomeScreen ? homeInfos.startText : ''\"\r\n                      />\r\n        </v-flex>\r\n\r\n        <!-- <v-flex xs12\r\n                pt-5>\r\n          <p v-html=\"homeInfos.homeText\"></p>\r\n        </v-flex> -->\r\n\r\n        <v-flex xs12\r\n                pt-3\r\n                v-if=\"!showOverview\">\r\n          <p v-html=\"homeInfos.awsInfo\"></p>\r\n        </v-flex>\r\n\r\n        <v-flex xs12\r\n                v-if=\"!showOverview && showMoreInfos\">\r\n          <p v-html=\"homeInfos.gcnetTransmissionsInfo\"></p>\r\n        </v-flex>\r\n\r\n        <v-flex xs12\r\n                v-if=\"!showOverview && showMoreInfos\">\r\n          <p v-html=\"homeInfos.additionalInfo\"></p>\r\n        </v-flex>\r\n\r\n        <v-flex xs12\r\n                pt-3>\r\n          <v-layout row wrap >\r\n            <!-- <v-flex>\r\n              <base-rectangle-button :buttonText=\"MapSelectionText\"\r\n                                      materialIconName=\"map\"\r\n                                      iconColor=\"white\"\r\n                                      v-on:clicked=\"catchMapViewClick()\"\r\n                                      />\r\n            </v-flex>\r\n\r\n            <v-flex>\r\n              <base-rectangle-button :buttonText=\"ListSelectionText\"\r\n                                      materialIconName=\"list\"\r\n                                      iconColor=\"white\"\r\n                                      v-on:clicked=\"catchListViewClick()\"\r\n                                    />\r\n            </v-flex> -->\r\n\r\n            <v-flex>\r\n              <base-rectangle-button :buttonText=\"showOverview ? 'Hide Stations Overview' : 'Show Stations Overview'\"\r\n                                      materialIconName=\"dashboard\"\r\n                                      iconColor=\"white\"\r\n                                      v-on:clicked=\"catchOverviewClick\"\r\n                                    />\r\n            </v-flex>\r\n\r\n            <v-flex>\r\n              <base-rectangle-button :buttonText=\"dataRequestText\"\r\n                                      materialIconName=\"save_alt\"\r\n                                      iconColor=\"white\"\r\n                                      url=\"http://cires1.colorado.edu/steffen/gcnet/order/admin/station.php\"\r\n                                    />\r\n            </v-flex>\r\n\r\n            <v-flex>\r\n              <base-rectangle-button :buttonText=\"showMoreInfosText\"\r\n                                      materialIconName=\"info\"\r\n                                      iconColor=\"white\"\r\n                                      v-on:clicked=\"showMoreInfos = !showMoreInfos; catchOverviewClick();\"\r\n                                    />\r\n            </v-flex>\r\n\r\n          </v-layout>\r\n        </v-flex>\r\n      </v-flex>\r\n\r\n      <v-flex v-if=\"showOverview\"\r\n              pt-3>\r\n        <stations-overview-page @detailClick=\"(stationID) => { $emit('detailClick', stationID); }\" />\r\n      </v-flex>\r\n\r\n    </v-layout>\r\n  </v-container>\r\n</template>\r\n\r\n<script>\r\nimport StationsOverviewPage from '@/components/Pages/StationsOverviewPage';\r\n\r\nimport BaseRectangleButton from '@/components/BaseElements/BaseRectangleButton.vue';\r\nimport TitleView from '@/components/TitleView.vue';\r\nimport homeInfos from '@/homeInfos';\r\n\r\nexport default {\r\n  props: {\r\n    showHomeScreen: Boolean,\r\n    showOverview: Boolean,\r\n  },\r\n  components: {\r\n    BaseRectangleButton,\r\n    TitleView,\r\n    StationsOverviewPage,\r\n  },\r\n  data: () => ({\r\n    baseStationURL: 'https://www.wsl.ch/gcnet/cms/stations/',\r\n    loadingStation: false,\r\n    homeInfos,\r\n    MapSelectionText: 'Select Stations via map',\r\n    ListSelectionText: 'Choose Station from list',\r\n    dataRequestText: 'Request GC-Net Data',\r\n    showMoreInfos: false,\r\n    showMoreInfosText: 'More Information',\r\n    stationOverviewUrl: 'https://www.wsl.ch/gcnet/stations.html',\r\n  }),\r\n  methods: {\r\n    catchMapViewClick() {\r\n      this.$emit('mapViewClick');\r\n    },\r\n    catchListViewClick() {\r\n      this.$emit('listViewClick');\r\n    },\r\n    catchOverviewClick() {\r\n      this.$emit('overviewClick');\r\n    },\r\n    anyClick(){\r\n      this.$emit('anyClick');\r\n    },\r\n  },\r\n\r\n};\r\n</script>\r\n\r\n<style scoped>\r\n\r\n\r\n  iframe html .wrap,\r\n  iframe html .measurement-panel {\r\n    padding: 0 !important;\r\n  }\r\n\r\n</style>\r\n","<template>\r\n\r\n  <v-card >\r\n    <v-container fluid pa-3>\r\n      <v-layout column>\r\n\r\n        <v-flex pb-3>\r\n          <v-layout row wrap justify-space-between>\r\n            <v-flex shrink display-1>\r\n              {{ this.fileObject.chartTitle }}\r\n            </v-flex>\r\n            <v-flex shrink class=\"title\">\r\n              {{ stationName }}\r\n            </v-flex>\r\n          </v-layout>            \r\n        </v-flex>\r\n\r\n        <v-flex v-if=\"chartIsLoading\"\r\n                class=\"chart\"\r\n                py-0 >\r\n          <v-layout row wrap fill-height justify-center align-center>\r\n            <v-flex shrink>\r\n              <v-progress-circular :size=\"50\"\r\n                                    color=\"primary\"\r\n                                    indeterminate />\r\n              \r\n            </v-flex>\r\n          </v-layout>\r\n        </v-flex>\r\n\r\n        <v-flex v-if=\"!chartIsLoading && !hasData\"\r\n                pt-2 pb-1\r\n                class=\"title\"\r\n                :style=\"`color: ${ $vuetify.theme.error };`\" >\r\n          {{ noDataText }}\r\n        </v-flex>\r\n\r\n        <v-flex v-if=\"dataError\"\r\n                class=\"title\"\r\n                :style=\"`color: ${ $vuetify.theme.error };`\" >\r\n          {{ dataError }}\r\n        </v-flex>\r\n\r\n        <v-flex v-show=\"intersected && !chartIsLoading && hasData\" >\r\n          <div class='chart' :id=\"chartId\" >\r\n          </div>            \r\n        </v-flex>\r\n\r\n      </v-layout>\r\n    </v-container>\r\n\r\n  </v-card>\r\n\r\n</template>\r\n\r\n<script>\r\nimport axios from 'axios'\r\nimport { createLineChart } from \"../chartData/charts\";\r\nimport * as am4core from \"@amcharts/amcharts4/core\";\r\n//import * as bullets from \"@amcharts/amcharts4/plugins/bullets\";\r\n\r\nexport default {\r\n  name: 'DetailChart',\r\n  props: {\r\n    url: String,\r\n    stationName: String,\r\n    chartId: String,\r\n    fileObject: Object,\r\n    delay: {\r\n      type: Number,\r\n      default: 500,\r\n    },\r\n  },\r\n  mounted() {\r\n    this.registeryIntersectionObserver();\r\n\r\n    // var that = this;\r\n\r\n    // window.setTimeout(function() {\r\n    //   that.visible = true;\r\n    //   // console.log(\"delayed visible \" + that.chartId + ' ' + that.visible);\r\n    //   that.loadChart();\r\n    //   that = null;\r\n      \r\n    // }, this.delay);\r\n    // // console.log(\"visible \" + that.chartId + ' ' + that.visible);\r\n  },\r\n  beforeDestroy() {\r\n    this.clearChart();\r\n  },\r\n  computed: {\r\n    hasData() {\r\n      return this.dataAvailable;\r\n    },\r\n  },\r\n  watch: {\r\n    records() {\r\n      if (this.records && this.records.length > 0){\r\n        this.createChart();\r\n      }\r\n    },\r\n  },\r\n  methods: {\r\n    buildGraphs(){\r\n      const graphs = [];\r\n      const keys = Object.keys(this.valueFieldMapping);\r\n\r\n      for (let i = 0; i < keys.length; i++) {\r\n        const key = keys[i];\r\n\r\n        if (this.url.includes(key)) {\r\n          const graphInfo = this.valueFieldMapping[key];\r\n\r\n          for (let j = 0; j < graphInfo.length; j++) {\r\n            const infoObj = graphInfo[j];\r\n            graphs.push(this.buildGraph(infoObj));\r\n          }\r\n        }\r\n      }\r\n\r\n      this.graphs = graphs;\r\n    },\r\n    buildGraph(infoObj){\r\n      return {\r\n        \"lineColor\": infoObj.color,\r\n        \"bullet\": new am4core.Circle(),\r\n        \"bulletRadius\": this.seriesSettings.bulletsRadius,\r\n        \"title\": infoObj.titleString,\r\n        \"valueField\": infoObj.parameter,\r\n        \"hideBulletsCount\": 20,\r\n      };\r\n    },\r\n    loadChart() {\r\n      this.clearChart();\r\n      this.chartIsLoading = true;\r\n      this.dataAvailable = false;\r\n      this.dataLength = 0;\r\n      this.dataError = '';\r\n\r\n      this.buildGraphs();\r\n\r\n      // clear and then new loading on the next tick is needed for the disposing to finish\r\n      // this.$nextTick( () => {\r\n        this.loadJsonFiles();\r\n      // });\r\n    },\r\n    loadJsonFiles(){\r\n      axios\r\n      .get(this.url)\r\n      .then(response => {\r\n        // createChart() gets called due to the watch on the records\r\n        this.records = response.data;\r\n      })\r\n      .catch(error => {\r\n        this.chartIsLoading = false;\r\n        this.dataError = `Error creating chart: ${error}`;\r\n      })\r\n    },\r\n    createChart(){\r\n      const dateFormatingInfos = {\r\n        dateFormat: this.dateFormat,\r\n        dateFormatNoTime: this.dateFormatNoTime,\r\n        inputFormat: 'x',\r\n      };\r\n    \r\n       try {\r\n          this.detailChart = createLineChart(this.chartId, 'timestamp', this.records, this.graphs,\r\n                                      !this.chartId.includes('_v'), undefined, undefined, dateFormatingInfos,\r\n                                       undefined, this.fileObject.numberFormat, this.fileObject.dateFormatTime,\r\n                                       this.url, // Test with direct data loading\r\n                                       this.chartDone, this.chartError);\r\n      } catch (error) {\r\n        this.chartIsLoading = false;\r\n        this.dataError = `Error creating chart: ${error}`;\r\n      }\r\n    },\r\n    chartError(error) {\r\n      this.chartIsLoading = false;\r\n      this.dataError = error.message;\r\n\r\n      this.dataAvailable = false;\r\n      this.dataLength = 0;\r\n      this.clearChart();\r\n    },\r\n    chartDone(doneResponse) {\r\n      this.chartIsLoading = false;\r\n      const dataLength = doneResponse && doneResponse.target.data ? doneResponse.target.data.length : 0;\r\n      \r\n      this.dataAvailable = dataLength > 0;\r\n      this.dataLength = dataLength;\r\n      this.dataError = '';\r\n\r\n      if (!this.dataAvailable){\r\n        this.clearChart();\r\n      }\r\n    },\r\n    registeryIntersectionObserver(){\r\n      this.ISObserver = new IntersectionObserver(entries => {\r\n        const entry = entries[0];\r\n        if (entry.isIntersecting) {\r\n          if (!this.intersected){\r\n            this.intersected = true;\r\n            this.loadChart();\r\n          }\r\n        }\r\n      });\r\n\r\n      this.ISObserver.observe(this.$el);\r\n    },\r\n    clearChart(){\r\n      if (this.detailChart) {\r\n         //console.log('dispose via DetailChart');\r\n        this.detailChart.dispose();\r\n      //  this.detailChart.destroy();\r\n     //    console.log('delete via DetailChart');\r\n        // this.detailChart = null;\r\n        //delete this.detailChart;\r\n      }\r\n      // TODO test commenting out the line below\r\n      //this.records = [];\r\n      this.records = null;\r\n\r\n       // Test\r\n      this.ISObserver.disconnect();\r\n    },\r\n  },\r\n  data()  {\r\n    return {\r\n      graphs: [],\r\n      dateFormat: 'MMM dd, YYYY HH:mm UTC',\r\n      dateFormatNoTime: 'MMM dd, YYYY',\r\n      detailChart: null,\r\n      visible: false,\r\n      chartIsLoading: true,\r\n      dataLength: 0,\r\n      dataAvailable: false,\r\n      dataError: '',\r\n      ISObserver: null,\r\n      intersected: false,\r\n      noDataText: 'No data available',\r\n      records: [],\r\n      valueFieldMapping: {\r\n        'temp': [\r\n          {\r\n              parameter: 'AirTC1',\r\n              color: '#D26200',\r\n              titleString: 'Thermocouple 1',\r\n          },\r\n          {\r\n              parameter: 'AirTC2',\r\n              color: '#0EAACD',\r\n              titleString: 'Thermocouple 2',\r\n          },\r\n        ],\r\n        'rh': [\r\n            {   parameter: 'RH1',\r\n                color: '#1DAFD7',\r\n                titleString: 'Relative humidity 1',\r\n            },\r\n            {\r\n                parameter: 'RH2',\r\n                color: '#393DA3',\r\n                titleString: 'Relative humidity 2',\r\n            },\r\n        ],\r\n        'rad': [\r\n            {\r\n                parameter: 'NetRad',\r\n                color: '#1C5197',\r\n                titleString: 'Net radiation',\r\n            },\r\n            {\r\n                parameter: 'SWin',\r\n                color: '#E79F32',\r\n                titleString: 'Short-wave incoming',\r\n            },\r\n            {\r\n                parameter: 'SWout',\r\n                color: '#9A6008',\r\n                titleString: 'Short-wave outgoing',\r\n            }\r\n        ],\r\n        'sheight': [\r\n            {\r\n                parameter: 'Sheight1',\r\n                color: '#679DE2',\r\n                titleString: 'Snow height 1',\r\n            },\r\n            {\r\n                parameter: 'Sheight2',\r\n                color: '#3375CD',\r\n                titleString: 'Snow height 2',\r\n            }\r\n        ],\r\n        'ws': [\r\n          {   parameter: 'WS1',\r\n              color: '#046401',\r\n              titleString: 'Wind-speed 1',\r\n          },\r\n          {\r\n              parameter: 'WS2',\r\n              color: '#5ED352',\r\n              titleString: 'Wind-speed 2',\r\n          }\r\n        ],\r\n        'wd': [\r\n            {\r\n                parameter: 'WD1',\r\n                color: '#046401',\r\n                titleString: 'Wind-direction 1',\r\n            },\r\n            {\r\n                parameter: 'WD2',\r\n                color: '#2FCE32',\r\n                titleString: 'Wind-direction 2',\r\n            }\r\n        ],\r\n        'press': [\r\n            {\r\n                parameter: 'press',\r\n                color: '#FF01FF',\r\n                titleString: 'Atmospheric pressure',\r\n            }\r\n        ],\r\n        'battvolt': [\r\n          {\r\n              parameter: 'BattVolt',\r\n              color: '#27AE61',\r\n              titleString: 'Battery voltage',\r\n          }\r\n        ],\r\n      },\r\n      seriesSettings: {\r\n        // lineStrokeWidth: 3,\r\n        // lineOpacity: 1,\r\n        // // the auto gap depends on the baseInterval, which might be \"hours\"\r\n        // // works if the lineConnect is false\r\n        // lineAutoGap: 2,\r\n        // lineConnect: false,\r\n        // bulletsStrokeWidth: 2,\r\n        bulletsRadius: 3,\r\n        // bulletFill: 'black',\r\n        // bulletsfillOpacity: 1,\r\n        // bulletsStrokeOpacity: 1,\r\n      },\r\n    };\r\n  },\r\n}\r\n</script>\r\n\r\n<style>\r\n\r\n    /**************  Responsive Web Design ****************/\r\n\r\n    /*  Small to large handset */\r\n    @media screen and (min-width: 480px) {\r\n        .chart {\r\n          height: 300px;\r\n        }\r\n    }\r\n\r\n    /* Small to medium tablet */\r\n    @media screen and (min-width: 700px) {\r\n        .chart {\r\n          height: 450px;\r\n        }\r\n    }\r\n\r\n    /* Large tablet to laptop */\r\n     @media screen and (min-width: 960px) {\r\n         .chart {\r\n            height: 450px;\r\n        }\r\n    }\r\n\r\n     /* Desktop */\r\n     @media screen and (min-width: 1264px) {\r\n        .chart {\r\n          height: 450px;\r\n        }\r\n    }\r\n\r\n\r\n    /*.chart {*/\r\n    /*    margin-bottom: 2em;*/\r\n    /*    height: 450px;*/\r\n    /*}*/\r\n\r\n</style>\r\n","<template>\r\n  <v-app class=\"application\" :style=\"dynamicBackground()\">\r\n\r\n    <v-content app >\r\n      <landing-page v-if=\"!currentStation\"\r\n                    :showHomeScreen=\"showHomeScreen\"\r\n                    :showOverview=\"showOverview\"\r\n                    @anyClick=\"catchAnyClick\"\r\n                    @mapViewClick=\"catchMapViewClick\"\r\n                    @listViewClick=\"catchListViewClick\"\r\n                    @updateDrawer=\"catchUpdateDrawer\"\r\n                    @overviewClick=\"catchOverviewClick\"\r\n                    @detailClick=\"listStationClick\"\r\n                    />\r\n\r\n\r\n      <stations-detail-page v-if=\"!showOverview && currentStation\"\r\n                            :currentStation=\"currentStation\" />\r\n    </v-content>\r\n\r\n    <the-navigation :mini=\"drawerIsMini\"\r\n                    :navItems=\"navItems\"\r\n                    :version=\"version\"\r\n                    v-on:homeClick=\"catchHomeClick\"\r\n                    v-on:drawerClick=\"catchDrawerClick\"\r\n                    v-on:stationOverviewClick=\"catchNavigationOverviewClick\">\r\n\r\n      <template v-slot:map>        \r\n        <stations-map :currentStation=\"currentStation\"\r\n                      v-on:mapClick=\"mapStationClick\" />          \r\n      </template>\r\n\r\n      <template v-slot:list>        \r\n        <stations-list :currentStation=\"currentStation\"\r\n                        v-on:listClick=\"listStationClick\" />\r\n      </template>\r\n\r\n    </the-navigation >\r\n\r\n  </v-app>\r\n</template>\r\n\r\n<script>\r\nimport TheNavigation from '@/components/TheNavigation';\r\nimport StationsMap from '@/components/StationsMap';\r\nimport StationsList from '@/components/StationsList';\r\nimport LandingPage from '@/components/Pages/LandingPage';\r\nimport '@/../node_modules/skeleton-placeholder/dist/bone.min.css';\r\nimport StationsDetailPage from \"./components/Pages/StationsDetailPage\";\r\n\r\n\r\nexport default {\r\n  name: 'App',\r\n  components: {\r\n    TheNavigation,\r\n    StationsMap,\r\n    StationsList,\r\n    LandingPage,\r\n    StationsDetailPage,\r\n  },\r\n  beforeMount() {\r\n      const imgs = require.context('./assets/', false, /\\.jpg$/);\r\n      // const imgs = require.context('./assets/', false, /\\.png$/);\r\n      const imgCache = {};\r\n\r\n      imgs.keys().forEach((key) => {\r\n        imgCache[key] = imgs(key);\r\n      });\r\n\r\n      this.appBGImages = imgCache;\r\n  },\r\n  methods: {\r\n    catchHomeClick() {\r\n      this.showHomeScreen = true;\r\n      this.showOverview = false;\r\n    },\r\n    catchAnyClick(){\r\n\r\n      // this.$nextTick(() => {\r\n      //   if (!this.drawerIsMini){\r\n      //     this.drawerIsMini = true;\r\n      //   }\r\n      // });\r\n        // this.drawerIsMini = !this.drawerIsMini;\r\n    },\r\n    catchDrawerClick(currentMini){\r\n      this.$nextTick(() => {\r\n        this.drawerIsMini = !currentMini;\r\n        if (this.drawerIsMini) {\r\n          this.resetNavigationChoice();\r\n        }\r\n      });\r\n    },\r\n    catchOverviewClick() {\r\n      // click from the landingPage is a toggle\r\n      this.showOverview = !this.showOverview;\r\n    },\r\n    catchNavigationOverviewClick() {\r\n      // click from the navigation is no toggle\r\n      this.showOverview = true;\r\n      this.currentStation = null;\r\n    },\r\n    resetNavigationChoice(){\r\n      this.navItems[0].active = false;\r\n      this.navItems[1].active = false;\r\n    },\r\n    catchUpdateDrawer(currentMini) {\r\n      this.drawerIsMini = currentMini;\r\n    },\r\n    catchMapViewClick() {\r\n      if (this.drawerIsMini){\r\n        this.drawerIsMini = false;\r\n      }\r\n      this.navItems[0].active = true;\r\n    },\r\n    catchListViewClick() {\r\n      if (this.drawerIsMini){\r\n        this.drawerIsMini = false;\r\n      }\r\n      this.navItems[1].active = true;\r\n    },\r\n    mapStationClick(stationUrl){\r\n      this.showHomeScreen = false;\r\n      this.showOverview = false;\r\n\r\n      const splits = stationUrl.split('/');\r\n      if (splits.length > 0) {\r\n        const stationName = splits[splits.length - 1];\r\n        this.changeCurrentStation(stationName);\r\n      }\r\n    },\r\n    changeCurrentStation(newStation){\r\n      this.currentStation = null;\r\n      // console.log('currentStation ' + this.currentStation);\r\n      this.$nextTick(() => {\r\n        this.currentStation = this.getStation(newStation);\r\n        // console.log('changed current station to ' + this.currentStation.name);\r\n      });\r\n      // console.log('currentStation after ' + this.currentStation);\r\n    },\r\n    listStationClick(stationName) {\r\n      this.showHomeScreen = false;\r\n      this.showOverview = false;\r\n\r\n      window.scrollTo(0, 0);\r\n\r\n      this.changeCurrentStation(stationName);\r\n    },\r\n    getStation(stationName) {\r\n      const stations = this.$store.getters.stations;\r\n      let station = null;\r\n      const keys = Object.keys(stations);\r\n\r\n      for(let key of keys) {\r\n        let val = stations[key];\r\n\r\n        if (val.name === stationName || val.alias === stationName || val.id === stationName){\r\n          station = val;\r\n          break;\r\n        }\r\n      }\r\n\r\n      return station;\r\n    },\r\n    dynamicBackground() {\r\n      const bgImg = this.randomImg(this.appBGImages);\r\n      let bgStyle = '';\r\n\r\n      if (bgImg) {\r\n        bgStyle = `background: linear-gradient(to bottom, rgba(255,255,255,0.95) 0%, rgba(255,255,255,0.85) 100%), url(${bgImg}) !important;`;\r\n\r\n        bgStyle += `background-position: center top !important;\r\n                    background-repeat: no-repeat !important;\r\n                    background-size: cover !important; `;\r\n      }\r\n\r\n      return bgStyle;\r\n    },\r\n    randomImg(imgs) {\r\n      const keys = Object.keys(imgs);\r\n      let rnd = 0;\r\n\r\n      if (keys.length > 0) {\r\n        rnd = this.randomIntFromSeed(0, keys.length - 1, '27.03.19');\r\n      }\r\n\r\n      return imgs[keys[rnd]];\r\n    },\r\n  },\r\n  data () {\r\n    return {\r\n      name: 'App',\r\n      appBGImages: {},\r\n      currentStation: null,\r\n      showHomeScreen: true,\r\n      showOverview: false,\r\n      version: process.env.VUE_APP_VERSION,\r\n      drawerIsMini: true, // this.$vuetify.breakpoint.smAndDown ? true : false,\r\n      navItems: [\r\n        { title: 'Greenland Map', icon: 'map', active: false },\r\n        { title: 'Station List', icon: 'list', active: false },\r\n        { title: 'Stations Overview', icon: 'dashboard', active: false },\r\n      ],\r\n    }\r\n  },\r\n}\r\n</script>\r\n\r\n<style lang=\"scss\">\r\n  /* Icons list: https://jossef.github.io/material-design-icons-iconfont/ */\r\n  $material-design-icons-font-directory-path: '~material-design-icons-iconfont/dist/fonts/';\r\n\r\n  //@import '~material-design-icons-iconfont/src/material-design-icons.scss';\r\n</style>\r\n\r\n<style scoped>\r\n\r\n  .card .subheading{\r\n    /* font-family: 'Libre Baskerville', serif; */\r\n    font-weight: 400;\r\n    /* color: #555; */\r\n    opacity: 0.75;\r\n    line-height: 1.25em;\r\n  }\r\n\r\n  .imagezoom,\r\n  .imagezoom img {\r\n    transition: all .2s;\r\n  }\r\n\r\n  .imagezoom img:hover,\r\n  .imagezoom img:focus {\r\n    transform: scale(1.2);\r\n  }\r\n\r\n</style>\r\n"]}